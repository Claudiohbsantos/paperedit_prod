"use strict";import{userSettings as settings,saveSettings}from"../modules/userSettings.js";import*as utils from"../modules/utils.js";import{Component}from"./component.js";class ExportSettings extends Component{constructor(){super(document.getElementById("export-settings")),this.updateValues(),this.attachListeners()}updateValues(){document.querySelector('#framerate [value="'+settings.framerate+'"]').selected=!0,document.getElementById("export-offset").value=settings.exportOffset,document.querySelector('#timeformat-radio [value="'+settings.exportTimeFormat+'"]').checked=!0}attachListeners(){for(let e of document.getElementsByName("timeformat"))e.addEventListener("change",timeFormatChanged);document.getElementById("framerate").addEventListener("change",changeFramerate),document.getElementById("export-offset").addEventListener("change",changeExportOffset),document.getElementById("export-offset").addEventListener("keydown",e=>{"Enter"==e.key&&this.hide()})}}let singleton=new ExportSettings;export default singleton;function changeFramerate(e){settings.framerate=parseFloat(e.target.value),saveSettings()}function changeExportOffset(e){settings.exportOffset=utils.parseTimeInput(e.target.value,settings.framerate)||0,saveSettings()}function timeFormatChanged(e){switch(e.target.value){case"timecode":settings.exportTimeFormat="timecode";break;case"timestamp":settings.exportTimeFormat="timestamp";break;case"seconds":settings.exportTimeFormat="seconds"}saveSettings()}